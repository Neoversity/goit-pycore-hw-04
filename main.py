# Завдання 1_________________________________________________________________________

# У вас є текстовий файл, який містить інформацію про місячні заробітні плати розробників у вашій компанії. 
# Кожен рядок у файлі містить прізвище розробника та його заробітну плату, які розділені комою без пробілів.

# Наприклад:
# Alex Korp,3000
# Nikita Borisenko,2000
# Sitarama Raju,1000

# Ваше завдання - розробити функцію total_salary(path), яка аналізує цей файл і
#  повертає загальну та середню суму заробітної плати всіх розробників.

# Вимоги до завдання:
# Функція total_salary(path) має приймати один аргумент - шлях до текстового файлу (path).
# Файл містить дані про заробітні плати розробників, розділені комами. Кожен рядок вказує на одного розробника.
# Функція повинна аналізувати файл, обчислювати загальну та середню суму заробітної плати.
# Результатом роботи функції є кортеж із двох чисел: загальної суми зарплат і середньої заробітної плати.


# Рекомендації для виконання:
# Використовуйте менеджер контексту with для читання файлів.
# Пам'ятайте про встановлення кодування при відкриті файлів
# Для розділення даних у кожному рядку можна застосувати метод split(',').
# Обрахуйте загальну суму заробітної плати, а потім розділіть її на кількість розробників, 
# щоб отримати середню зарплату.
# Опрацьовуйте можливі винятки при роботі з файлами, такі як відсутність файлу.

def total_salary(path):
    total_salary = 0
    num_developers = 0
    try:
        with open(path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            if not lines:
                return  "Файл порожній", "Файл порожній"
            for line in lines:
                if len(line.strip()) == 0:
                    continue
                if ',' not in line:
                    raise ValueError("Неправильний формат рядка у файлі")
                name, salary = line.strip().split(',')
                total_salary += int(salary)
                num_developers += 1

        average_salary = total_salary / num_developers  if num_developers > 0 else 0
        return total_salary, average_salary



    except FileNotFoundError:
        print("Файл не знайдено.")
        return None, None
    except ValueError as ve:
        print("Помилка:", ve)
        return None, None
    except Exception as e:
        print("Виникла помилка:", e)
        return None, None    

# ************************************************************

# Приклад використання функції:
# path_to_file = 'salaries.txt'
# total_sum, average_salary = total_salary(path_to_file)
# if total_sum is not None and average_salary is not None:
#     print("Загальна сума заробітної плати:", total_sum)
#     print("Середня заробітна плата:", average_salary)

# ************************************************************




# Завдання 2___________________________________________________________________________________________

# У вас є текстовий файл, який містить інформацію про котів. 
# Кожен рядок файлу містить унікальний ідентифікатор кота, його ім'я та вік, розділені комою. Наприклад:

# 60b90c1c13067a15887e1ae1,Tayson,3
# 60b90c2413067a15887e1ae2,Vika,1
# 60b90c2e13067a15887e1ae3,Barsik,2
# 60b90c3b13067a15887e1ae4,Simon,12
# 60b90c4613067a15887e1ae5,Tessi,5

# Ваше завдання - розробити функцію get_cats_info(path), 
# яка читає цей файл та повертає список словників з інформацією про кожного кота.

# Вимоги до завдання:
# Функція get_cats_info(path) має приймати один аргумент - шлях до текстового файлу (path).
# Файл містить дані про котів, де кожен запис містить унікальний ідентифікатор, ім'я кота та його вік.
# Функція має повертати список словників, де кожен словник містить інформацію про одного кота.

# Рекомендації для виконання:
# Використовуйте with для безпечного читання файлу.
# Пам'ятайте про встановлення кодування при відкриті файлів
# Для кожного рядка в файлі використовуйте split(',') для отримання ідентифікатора, імені та віку кота.
# Утворіть словник з ключами "id", "name", "age" для кожного кота та додайте його до списку, який буде повернуто.
# Опрацьовуйте можливі винятки, пов'язані з читанням файлу.



def get_cats_info(path):
    cats_list = []
    try:
        with open(path, 'r', encoding="utf-8") as file:
            lines = file.readlines()
            if not lines:
                return  "Файл порожній"
            for line in lines:
                if ',' in line:
                    cat_id, name, age = line.strip().split(',')
                    cat_info = {'id': cat_id, 'name': name, 'ade': int(age)}
                    cats_list.append(cat_info)
                else:
                    print("Неправильний формат рядка:", line)
    except FileNotFoundError:
        print('Файл не знайдено')
        return None, None, None
    except Exception as e:
        print("Виникла помилка при читанні файлу:", e)
        return None, None, None
    
    return cats_list

# ************************************************************

# Приклад використання функції:
# path_to_cats_file = "cats.txt"
# cats_info = get_cats_info(path_to_cats_file)
# print(cats_info)

# ************************************************************


# Завдання 3

# Розробіть скрипт, який приймає шлях до директорії в якості аргументу командного рядка 
# і візуалізує структуру цієї директорії, виводячи імена всіх піддиректорій та файлів. 
# Для кращого візуального сприйняття, імена директорій та файлів мають відрізнятися за кольором.

# Вимоги до завдання:
# Створіть віртуальне оточення Python для ізоляції залежностей проекту.
# Скрипт має отримувати шлях до директорії як аргумент при запуску. 
# Цей шлях вказує, де знаходиться директорія, структуру якої потрібно відобразити.
# Використання бібліотеки colorama для реалізації кольорового виведення.
# Скрипт має коректно відображати як імена директорій, так і імена файлів, використовуючи рекурсивний спосіб обходу директорій 
# (можна, за бажанням, використати не рекурсивний спосіб).
# Повинна бути перевірка та обробка помилок, наприклад, якщо вказаний шлях не існує або він не веде до директорії.

# Рекомендації для виконання:
# Спочатку встановіть бібліотеку colorama. Для цього створіть та активуйте віртуальне оточення Python, 
# а потім встановіть пакет за допомогою pip.
# Використовуйте модуль sys для отримання шляху до директорії як аргументу командного рядка.
# Для роботи з файловою системою використовуйте модуль pathlib.
# Забезпечте належне форматування виводу, використовуючи функції colorama.

# Критерії оцінювання:
# Створення та використання віртуального оточення.
# Правильність отримання та обробки шляху до директорії.
# Точність виведення структури директорії.
# Коректне застосування кольорового виведення за допомогою colorama.
# Якість коду, включаючи читабельність, структурування та коментарі.

import sys
from pathlib import Path
from colorama import Fore, Back, Style, init

# Ініціалізація colorama для підтримки кольорового виведення
init(autoreset=True)

def visual_directory_structure(path, indent=0):
    directory = Path(path)

    # Перевірка чи директорія існує
    if not directory.exists() or not directory.is_dir():
        print(f"{Fore.RED}Помилка: {path} не існує або не є директорією.")
        return
    
    # Виведення назви поточної директорії
    # print(f"{Fore.YELLOW}{' ' * indent}[Папка] {directory.name}")
    
    # Виведення імен файлів та піддиректорій
    for item in directory.iterdir():
        if item.is_dir():
            print(f"{' ' * indent}{Fore.BLUE}{Style.BRIGHT}[Папка] {item.name}")
            visual_directory_structure(item, indent + 4)
        else:
            print(f"{' ' * indent}{Fore.GREEN}[Файл] {item.name}")

# ************************************************************

# Варіант_1 виклику при команді << python main.py picture  >>
# if __name__ == "__main__":
#     # Перевірка чи передано шлях до директорії як аргумент командного рядка
#     if len(sys.argv) != 2:
#         print(f"{Fore.RED}Помилка: Введіть шлях до директорії як аргумент командного рядка.")
#         sys.exit(1)
#     directory_path = sys.argv[1]
#     visual_directory_structure(directory_path)  


# Варіант_2 виклику при команді << python main.py  >>
# Початковий шлях до директорії
# path = Path('picture')
# visual_directory_structure(path)

# ************************************************************



# Завдання 4______________________________________________________________________________________

# Напишіть консольного бота помічника, який розпізнаватиме команди, що вводяться з клавіатури,
# та буде відповідати відповідно до введеної команди.

# ☝ Бот помічник повинен стати для нас прототипом застосунку-асистента, який ми розробимо в наступних домашніх завданнях. 
# Застосунок-асистент в першому наближенні повинен вміти працювати з книгою контактів та календарем.

# У цій домашній роботі зосередимося на інтерфейсі самого бота. 
# Найпростіший і найзручніший на початковому етапі розробки інтерфейс - це консольний застосунок CLI (Command Line Interface). 
# CLI достатньо просто реалізувати. 

# Будь-який CLI складається з трьох основних елементів:

# Парсер команд. Частина, яка відповідає за розбір введених користувачем рядків, виділення з рядка ключових слів та модифікаторів команд.
# Функції обробники команд - набір функцій, які ще називають handler, вони відповідають за безпосереднє виконання команд.
# Цикл запит-відповідь. 
# Ця частина застосунку відповідає за отримання від користувача даних та повернення користувачеві відповіді від функції - handler-а.


# На першому етапі наш бот-асистент повинен вміти зберігати ім'я та номер телефону, знаходити номер телефону за ім'ям, 
# змінювати записаний номер телефону, виводити в консоль всі записи, які зберіг. 
# Щоб реалізувати таку нескладну логіку, скористаємося словником. У словнику будемо зберігати ім'я користувача, як ключ, і номер телефону як значення.

# Вимоги до завдання:

# Програма повинна мати функцію main(), яка управляє основним циклом обробки команд.
# Реалізуйте функцію parse_input(), яка розбиратиме введений користувачем рядок на команду та її аргументи. 
# Команди та аргументи мають бути розпізнані незалежно від регістру введення.
# Ваша програма повинна очікувати на введення команд користувачем та обробляти їх за допомогою відповідних функцій. 
# В разі введення команди "exit" або "close", програма повинна завершувати виконання.
# Напишіть функції обробники для різних команд, такі як add_contact(), change_contact(), show_phone() тощо.
# Використовуйте словник Python для зберігання імен і номерів телефонів. Ім'я буде ключем, а номер телефону – значенням.
# Ваша програма має вміти ідентифікувати та повідомляти про неправильно введені команди.

# Рекомендації для виконання

# По перше, нам треба систематизувати опис форматів наших команд для консольного бота-помічника. 
# Це допоможе зрозуміти які функції треба зробити для кожної команди. Зробімо це:

# 1. Команда "hello", тут можна обійтись поки без функції та використати звичайний print:

# Введення: "hello"
# Вивід: "How can I help you?"

# 2. Команда "add [ім'я] [номер телефону]". Для цієї команди зробимо функцію add_contact:

# Введення: "add John 1234567890"
# Вивід: "Contact added."

# 3. Команда "change [ім'я] [новий номер телефону]". Для цієї команди зробимо функцію change_contact:

# Введення: "change John 0987654321"
# Вивід: "Contact updated." або повідомлення про помилку, якщо ім'я не знайдено

# 4. Команда "phone [ім'я]". Для цієї команди зробимо функцію show_phone:

# Введення: "phone John"
# Вивід: [номер телефону] або повідомлення про помилку, якщо ім'я не знайдено

# 5. Команда "all". Для цієї команди зробимо функцію show_all:

# Введення: "all"
# Вивід: усі збережені контакти з номерами телефонів

# 6. Команда "close" або "exit". Оскільки тут треба перервати виконання програми, 
# можна поки обійтись без функції для цих команд:

# Введення: будь-яке з цих слів
# Вивід: "Good bye!" та завершення роботи бота
# Будь-яка команда, яка не відповідає вищезазначеним форматам, буде вважатися нами невірною, 
# і бот буде виводити повідомлення "Invalid command."


