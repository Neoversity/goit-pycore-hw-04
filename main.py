# Завдання 1_________________________________________________________________________

# У вас є текстовий файл, який містить інформацію про місячні заробітні плати розробників у вашій компанії. 
# Кожен рядок у файлі містить прізвище розробника та його заробітну плату, які розділені комою без пробілів.

# Наприклад:
# Alex Korp,3000
# Nikita Borisenko,2000
# Sitarama Raju,1000

# Ваше завдання - розробити функцію total_salary(path), яка аналізує цей файл і
#  повертає загальну та середню суму заробітної плати всіх розробників.

# Вимоги до завдання:
# Функція total_salary(path) має приймати один аргумент - шлях до текстового файлу (path).
# Файл містить дані про заробітні плати розробників, розділені комами. Кожен рядок вказує на одного розробника.
# Функція повинна аналізувати файл, обчислювати загальну та середню суму заробітної плати.
# Результатом роботи функції є кортеж із двох чисел: загальної суми зарплат і середньої заробітної плати.


# Рекомендації для виконання:
# Використовуйте менеджер контексту with для читання файлів.
# Пам'ятайте про встановлення кодування при відкриті файлів
# Для розділення даних у кожному рядку можна застосувати метод split(',').
# Обрахуйте загальну суму заробітної плати, а потім розділіть її на кількість розробників, 
# щоб отримати середню зарплату.
# Опрацьовуйте можливі винятки при роботі з файлами, такі як відсутність файлу.

def total_salary(path):
    total_salary = 0
    num_developers = 0
    try:
        with open(path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            if not lines:
                return  "Файл порожній", "Файл порожній"
            for line in lines:
                if len(line.strip()) == 0:
                    continue
                if ',' not in line:
                    raise ValueError("Неправильний формат рядка у файлі")
                name, salary = line.strip().split(',')
                total_salary += int(salary)
                num_developers += 1

        average_salary = total_salary / num_developers  if num_developers > 0 else 0
        return total_salary, average_salary



    except FileNotFoundError:
        print("Файл не знайдено.")
        return None, None
    except ValueError as ve:
        print("Помилка:", ve)
        return None, None
    except Exception as e:
        print("Виникла помилка:", e)
        return None, None
    


# Приклад використання функції:
# path_to_file = 'salaries.txt'
# total_sum, average_salary = total_salary(path_to_file)
# if total_sum is not None and average_salary is not None:
#     print("Загальна сума заробітної плати:", total_sum)
#     print("Середня заробітна плата:", average_salary)



# Завдання 2___________________________________________________________________________________________

# У вас є текстовий файл, який містить інформацію про котів. 
# Кожен рядок файлу містить унікальний ідентифікатор кота, його ім'я та вік, розділені комою. Наприклад:

# 60b90c1c13067a15887e1ae1,Tayson,3
# 60b90c2413067a15887e1ae2,Vika,1
# 60b90c2e13067a15887e1ae3,Barsik,2
# 60b90c3b13067a15887e1ae4,Simon,12
# 60b90c4613067a15887e1ae5,Tessi,5

# Ваше завдання - розробити функцію get_cats_info(path), 
# яка читає цей файл та повертає список словників з інформацією про кожного кота.

# Вимоги до завдання:
# Функція get_cats_info(path) має приймати один аргумент - шлях до текстового файлу (path).
# Файл містить дані про котів, де кожен запис містить унікальний ідентифікатор, ім'я кота та його вік.
# Функція має повертати список словників, де кожен словник містить інформацію про одного кота.

# Рекомендації для виконання:
# Використовуйте with для безпечного читання файлу.
# Пам'ятайте про встановлення кодування при відкриті файлів
# Для кожного рядка в файлі використовуйте split(',') для отримання ідентифікатора, імені та віку кота.
# Утворіть словник з ключами "id", "name", "age" для кожного кота та додайте його до списку, який буде повернуто.
# Опрацьовуйте можливі винятки, пов'язані з читанням файлу.



